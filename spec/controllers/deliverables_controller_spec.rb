require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DeliverablesController do
  
  # This should return the minimal set of attributes required to create a valid
  # Deliverable. As you add validations to Deliverable, be sure to
  # update the return value of this method accordingly.

  before(:each) do
    @stock_deliverable_type = Factory.create(:stock_deliverable_type)
    @attr = { :name => "test deliverable",
              :estimated_effort => 1.5,
              :estimated_size => 2.5,
              :estimated_production_rate => 3.5
            }
    #@complexity = Factory.create(:complexity)
  end

  describe "GET index" do
    it "assigns all stock_deliverable_type deliverables as @deliverables " do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      get :index
      assigns(:deliverables).should eq([deliverable])
    end
  end

  describe "GET show" do
    it "assigns the requested stock_deliverable_type deliverable as @deliverable" do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      get :show, :id => deliverable.id.to_s
      assigns(:deliverable).should eq(deliverable)
    end
  end

  describe "GET new" do
    it "assigns a new stock deliverable type deliverable as @deliverable" do
      get :new, :project_phase_id => @stock_deliverable_type.project_phase.id
      assigns(:deliverable).should be_a_new(Deliverable)
    end
    
    #it "assigns a list complexities as @complexities" do
    #  get :new, :project_phase_id => @stock_deliverable_type.project_phase.id
    #  assigns(:complexities).size.should == 3
    #end
   end

  describe "GET edit" do
    it "assigns the requested stock_deliverable_type deliverable as @deliverable" do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      get :edit, :id => deliverable.id.to_s
      assigns(:deliverable).should eq(deliverable)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new stock_deliverable_type Deliverable" do
        expect {
          post :create, 
            :project_phase_id => @stock_deliverable_type.project_phase.id, 
            :deliverable => @attr.merge(:stock_deliverable_type_id => @stock_deliverable_type.id)
        }.to change(Deliverable, :count).by(1)
      end

      it "assigns a newly created stock_deliverable_type deliverable as @deliverable" do
        post :create, 
             :stock_deliverable_type_id => @stock_deliverable_type.id, 
             :deliverable => @attr.merge(:stock_deliverable_type_id => @stock_deliverable_type.id)
        assigns(:deliverable).should be_a(Deliverable)
        assigns(:deliverable).should be_persisted
      end

      it "redirects to the created stock_deliverable_type deliverable" do
        post :create, 
             :stock_deliverable_type_id => @stock_deliverable_type.id, 
             :deliverable => @attr.merge(:stock_deliverable_type_id => @stock_deliverable_type.id)
        response.should redirect_to(Deliverable.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stock_deliverable_type deliverable as @deliverable" do
        # Trigger the behavior that occurs when invalid params are submitted
        Deliverable.any_instance.stub(:save).and_return(false)
        post :create, :deliverable => {:stock_deliverable_type_id => @stock_deliverable_type.id, 
                                       :project_phase_id => @stock_deliverable_type.project_phase.id}
        assigns(:deliverable).should be_a_new(Deliverable)
      end

      it "re-renders the 'new' stock_deliverable_type deliverable template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Deliverable.any_instance.stub(:save).and_return(false)
        post :create, :deliverable => {:stock_deliverable_type_id => @stock_deliverable_type.id, 
                                       :project_phase_id => @stock_deliverable_type.project_phase.id}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stock_deliverable_type deliverable" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        # Assuming there are no other deliverables in the database, this
        # specifies that the Deliverable created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Deliverable.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => deliverable.id, :deliverable => {'these' => 'params'}
      end

      it "assigns the requested stock_deliverable_type deliverable as @deliverable" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        put :update, :id => deliverable.id, :deliverable => @attr
        assigns(:deliverable).should eq(deliverable)
      end

      it "redirects to the stock_deliverable_type deliverable" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        put :update, :id => deliverable.id, :deliverable => @attr
        response.should redirect_to(deliverable)
      end
    end

    describe "with invalid params" do
      it "assigns the stock_deliverable_type deliverable as @deliverable" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        # Trigger the behavior that occurs when invalid params are submitted
        Deliverable.any_instance.stub(:save).and_return(false)
        put :update, :id => deliverable.id.to_s, :deliverable => {}
        assigns(:deliverable).should eq(deliverable)
      end

      it "re-renders the 'edit' stock_deliverable_type deliverable template" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        # Trigger the behavior that occurs when invalid params are submitted
        Deliverable.any_instance.stub(:save).and_return(false)
        put :update, :id => deliverable.id.to_s, :deliverable => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested stock_deliverable_type deliverable" do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      expect {
        delete :destroy, :id => deliverable.id.to_s
      }.to change(Deliverable, :count).by(-1)
    end

    it "redirects to the stock_deliverable_type deliverables list" do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      delete :destroy, :id => deliverable.id.to_s
      response.should redirect_to(deliverables_url)
    end
  end

end

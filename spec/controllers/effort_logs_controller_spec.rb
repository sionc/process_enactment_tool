require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EffortLogsController do

  # This should return the minimal set of attributes required to create a valid
  # EffortLog. As you add validations to EffortLog, be sure to
  # update the return value of this method accordingly.
  
  before(:each) do
    @stock_deliverable_type = Factory.create(:stock_deliverable_type)
    @complexity = Factory.create(:complexity)
    @attr = { :name => "test deliverable",
              :estimated_size => 1.5,
              :estimated_production_rate => 2.5,
              :estimated_effort => 3.75,
              :complexity_id => @complexity.id
            }
  end
  
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all effort_logs as @effort_logs" do
      deliverable = @stock_deliverable_type.deliverables.create! @attr
      effort_log = EffortLog.create! valid_attributes.merge(:deliverable_id => deliverable.id)
      get :index
      assigns(:effort_logs).should eq([effort_log])
    end
  end

  describe "GET show" do
    it "assigns the requested effort_log as @effort_log" do
      effort_log = EffortLog.create! valid_attributes
      get :show, :id => effort_log.id
      assigns(:effort_log).should eq(effort_log)
    end
  end

  describe "GET new" do
    it "assigns a new effort_log as @effort_log" do
      get :new
      assigns(:effort_log).should be_a_new(EffortLog)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new EffortLog" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
      
        expect {
          post :create, :effort_log => valid_attributes.merge(:deliverable_id => deliverable.id)
        }.to change(EffortLog, :count).by(1)
      end

      it "assigns a newly created effort_log as @effort_log" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        
        post :create, :effort_log => valid_attributes.merge(:deliverable_id => deliverable.id)
        assigns(:effort_log).should be_a(EffortLog)
        assigns(:effort_log).should be_persisted
      end

      it "redirects to the deliverable show page" do
        deliverable = @stock_deliverable_type.deliverables.create! @attr
        
        post :create, :effort_log => valid_attributes.merge(:deliverable_id => deliverable.id)
        response.should redirect_to(deliverable)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved effort_log as @effort_log" do
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        post :create, :effort_log => {}
        assigns(:effort_log).should be_a_new(EffortLog)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        post :create, :effort_log => {}
        response.should render_template("new")
      end
    end
  end

end
